{"version":3,"sources":["components/SearchBox.js","components/ErrorBoundary.js","components/CardList.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchChange","className","type","onChange","placeholder","ErrorBoundary","state","hasError","this","setState","props","children","Component","CardList","robots","Error","Scroll","style","overflow","border","height","App","searchField","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robo","name","toLocaleLowerCase","includes","toLowerCase","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAgBeA,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,yBAAKC,UAAU,OACb,2BACEA,UAAU,mCACVC,KAAK,SACLC,SAAUH,EACVI,YAAY,oBCcLC,G,kNApBXC,MAAQ,CACJC,UAAU,G,kEAIVC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAIC,KAAKF,MAAMC,SACJ,yDAGP,6BACKC,KAAKE,MAAMC,c,GAfAC,cCebC,EAdE,SAAC,GAAe,EAAbC,OAEZ,MAAM,IAAIC,MAAM,eCKTC,EARA,SAACN,GACZ,OACI,yBAAKO,MAAO,CAACC,SAAS,SAAUC,OAAO,kBAAkBC,OAAO,UAC3DV,EAAMC,WCuCJU,G,iNAlCbf,MAAQ,CACNQ,OAAQ,GACRQ,YAAa,I,EAEfC,eAAiB,SAACC,GAChB,EAAKf,SAAS,CAAEa,YAAaE,EAAMC,OAAOC,S,kEAEvB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKtB,SAAS,CAAEK,OAAQiB,S,+BAEjC,IAAD,EACyBvB,KAAKF,MAA7BQ,EADD,EACCA,OAAQQ,EADT,EACSA,YACVU,EAAiBlB,EAAOmB,QAAO,SAAAC,GACnC,OAAOA,EAAKC,KAAKC,oBAAoBC,SAASf,EAAYgB,kBAE5D,OAAQxB,EAAOyB,OAIX,yBAAKtC,UAAU,MACb,2CACA,kBAAC,EAAD,CAAWD,aAAcQ,KAAKe,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KAAe,kBAAC,EAAD,CAAUT,OAAQkB,OAPvC,8C,GAnBYQ,IAAM5B,YCGJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,6BACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.dc1ddc11.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        onChange={searchChange}\n        placeholder='search robots'>\n      </input>\n    </div>\n\n  );\n}\n\nexport default SearchBox;\n","import React, { Component } from 'react'\n\nclass ErrorBoundary extends Component {\n    state = {\n        hasError: false\n    }\n\n    componentDidCatch() {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops there is some Error!</h1>\n        }\n        return (\n            <div>\n                {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default ErrorBoundary","import React from 'react'\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n    if (true) {\n        throw new Error('NOOoooo!!!');\n    }\n    return (\n        <div>\n            {\n                robots.map((robo, i) => {\n                    return <Card key={i} id={robo.id} name={robo.name} email={robo.email}></Card>\n                })\n            }\n        </div>\n    )\n}\nexport default CardList","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow:'Scroll', border:'2px solid black',height:'800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","import React from 'react';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport CardList from '../components/CardList'\nimport Scroll from '../components/Scroll'\n// import { robots } from './robots' no need static json file\nimport 'tachyons'\n\nclass App extends React.Component {\n  state = {\n    robots: [],\n    searchField: ''\n  }\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value })\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }))\n  }\n  render() {\n    const { robots, searchField } = this.state\n    const filteredRobots = robots.filter(robo => {\n      return robo.name.toLocaleLowerCase().includes(searchField.toLowerCase())\n    })\n    return !robots.length ?\n      <h1>Loading...</h1>\n      :\n      (\n        <div className='tc'>\n          <h1>RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundary><CardList robots={filteredRobots} /></ErrorBoundary>\n          </Scroll>\n\n        </div>\n      );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div>\n      <App/>\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}